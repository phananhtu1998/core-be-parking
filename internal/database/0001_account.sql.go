// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0001_account.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const checkAccountBaseExists = `-- name: CheckAccountBaseExists :one
SELECT COUNT(*)
FROM ` + "`" + `account` + "`" + `
WHERE email = ?
`

func (q *Queries) CheckAccountBaseExists(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkAccountBaseExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAccountById = `-- name: DeleteAccountById :exec
UPDATE account 
SET
    is_deleted = true,
    update_at = NOW()
WHERE id = ?
`

func (q *Queries) DeleteAccountById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAccountById, id)
	return err
}

const editAccountById = `-- name: EditAccountById :exec
UPDATE account 
SET
    name = ?,
    email = ?,
    password = ?,
    status = ?,
    images = ?,
    update_at = NOW()
WHERE id = ?
`

type EditAccountByIdParams struct {
	Name     string
	Email    string
	Password string
	Status   bool
	Images   string
	ID       string
}

func (q *Queries) EditAccountById(ctx context.Context, arg EditAccountByIdParams) error {
	_, err := q.db.ExecContext(ctx, editAccountById,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Status,
		arg.Images,
		arg.ID,
	)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, name, email, status,images
FROM ` + "`" + `account` + "`" + `
WHERE id = ? AND is_deleted = false
`

type GetAccountByIdRow struct {
	ID     string
	Name   string
	Email  string
	Status bool
	Images string
}

func (q *Queries) GetAccountById(ctx context.Context, id string) (GetAccountByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i GetAccountByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Status,
		&i.Images,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT id, name, email, status, images
FROM ` + "`" + `account` + "`" + `
WHERE is_deleted = false
`

type GetAllAccountsRow struct {
	ID     string
	Name   string
	Email  string
	Status bool
	Images string
}

func (q *Queries) GetAllAccounts(ctx context.Context) ([]GetAllAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAccountsRow
	for rows.Next() {
		var i GetAllAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Status,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneAccountInfoAdmin = `-- name: GetOneAccountInfoAdmin :one
SELECT id, name, email, password,salt,status,create_at,update_at, images
FROM ` + "`" + `account` + "`" + `
WHERE email = ? AND is_deleted = false
`

type GetOneAccountInfoAdminRow struct {
	ID       string
	Name     string
	Email    string
	Password string
	Salt     string
	Status   bool
	CreateAt time.Time
	UpdateAt time.Time
	Images   string
}

func (q *Queries) GetOneAccountInfoAdmin(ctx context.Context, email string) (GetOneAccountInfoAdminRow, error) {
	row := q.db.QueryRowContext(ctx, getOneAccountInfoAdmin, email)
	var i GetOneAccountInfoAdminRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.Status,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Images,
	)
	return i, err
}

const insertAccount = `-- name: InsertAccount :execresult
INSERT INTO ` + "`" + `account` + "`" + ` (
    id,
    name,
    email,
    password,
    salt,
    status,
    images,
    is_deleted,
    create_at,
    update_at
)
VALUES(?,?,?,?,?,?,?,false,NOW(),NOW())
`

type InsertAccountParams struct {
	ID       string
	Name     string
	Email    string
	Password string
	Salt     string
	Status   bool
	Images   string
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertAccount,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Salt,
		arg.Status,
		arg.Images,
	)
}
