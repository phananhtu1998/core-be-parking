// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0001_account.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const changPasswordById = `-- name: ChangPasswordById :exec
UPDATE account 
SET
    password = ?,
    update_at = NOW()
WHERE id = ?
`

type ChangPasswordByIdParams struct {
	Password string
	ID       string
}

func (q *Queries) ChangPasswordById(ctx context.Context, arg ChangPasswordByIdParams) error {
	_, err := q.db.ExecContext(ctx, changPasswordById, arg.Password, arg.ID)
	return err
}

const checkAccountBaseExists = `-- name: CheckAccountBaseExists :one
SELECT COUNT(*)
FROM ` + "`" + `account` + "`" + `
WHERE email = ? || username = ?
`

type CheckAccountBaseExistsParams struct {
	Email    string
	Username string
}

func (q *Queries) CheckAccountBaseExists(ctx context.Context, arg CheckAccountBaseExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkAccountBaseExists, arg.Email, arg.Username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkAccountExists = `-- name: CheckAccountExists :one
SELECT COUNT(*) FROM ` + "`" + `account` + "`" + `
`

func (q *Queries) CheckAccountExists(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkAccountExists)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkAccountUserNameExists = `-- name: CheckAccountUserNameExists :one
SELECT COUNT(*)
FROM ` + "`" + `account` + "`" + `
WHERE username = ?
`

func (q *Queries) CheckAccountUserNameExists(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkAccountUserNameExists, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAccountById = `-- name: DeleteAccountById :exec
UPDATE account 
SET
    is_deleted = true,
    update_at = NOW()
WHERE id = ?
`

func (q *Queries) DeleteAccountById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAccountById, id)
	return err
}

const deleteRoleAccountByAccountId = `-- name: DeleteRoleAccountByAccountId :exec
UPDATE ` + "`" + `role_account` + "`" + `
SET is_deleted = true, update_at = NOW()
WHERE account_id = ?
`

func (q *Queries) DeleteRoleAccountByAccountId(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, deleteRoleAccountByAccountId, accountID)
	return err
}

const editAccountById = `-- name: EditAccountById :exec
UPDATE account 
SET
    name = ?,
    username = ?,
    code = ?,
    email = ?,
    status = ?,
    images = ?,
    update_at = NOW()
WHERE id = ?
`

type EditAccountByIdParams struct {
	Name     string
	Username string
	Code     string
	Email    string
	Status   bool
	Images   string
	ID       string
}

func (q *Queries) EditAccountById(ctx context.Context, arg EditAccountByIdParams) error {
	_, err := q.db.ExecContext(ctx, editAccountById,
		arg.Name,
		arg.Username,
		arg.Code,
		arg.Email,
		arg.Status,
		arg.Images,
		arg.ID,
	)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id,code, number, name,username, email, status,images,salt,created_by, password
FROM ` + "`" + `account` + "`" + `
WHERE id = ? AND is_deleted = false
`

type GetAccountByIdRow struct {
	ID        string
	Code      string
	Number    int32
	Name      string
	Username  string
	Email     string
	Status    bool
	Images    string
	Salt      string
	CreatedBy string
	Password  string
}

func (q *Queries) GetAccountById(ctx context.Context, id string) (GetAccountByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i GetAccountByIdRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Number,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Status,
		&i.Images,
		&i.Salt,
		&i.CreatedBy,
		&i.Password,
	)
	return i, err
}

const getAllAccountByCreatedBy = `-- name: GetAllAccountByCreatedBy :many
SELECT id,code, number, name,username, email, status,images,salt,created_by, password
FROM ` + "`" + `account` + "`" + `
WHERE created_by = ? AND is_deleted = false
`

type GetAllAccountByCreatedByRow struct {
	ID        string
	Code      string
	Number    int32
	Name      string
	Username  string
	Email     string
	Status    bool
	Images    string
	Salt      string
	CreatedBy string
	Password  string
}

func (q *Queries) GetAllAccountByCreatedBy(ctx context.Context, createdBy string) ([]GetAllAccountByCreatedByRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccountByCreatedBy, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAccountByCreatedByRow
	for rows.Next() {
		var i GetAllAccountByCreatedByRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Number,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.Status,
			&i.Images,
			&i.Salt,
			&i.CreatedBy,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAccounts = `-- name: GetAllAccounts :many
SELECT id,code, number, name, email,username, status, images,created_by
FROM ` + "`" + `account` + "`" + `
WHERE is_deleted = false
`

type GetAllAccountsRow struct {
	ID        string
	Code      string
	Number    int32
	Name      string
	Email     string
	Username  string
	Status    bool
	Images    string
	CreatedBy string
}

func (q *Queries) GetAllAccounts(ctx context.Context) ([]GetAllAccountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAccountsRow
	for rows.Next() {
		var i GetAllAccountsRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Number,
			&i.Name,
			&i.Email,
			&i.Username,
			&i.Status,
			&i.Images,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLicenseByAccountId = `-- name: GetLicenseByAccountId :one
SELECT a.id,r.role_name,l.license
FROM account as a
JOIN role_account ra ON a.id = ra.account_id
JOIN role r ON ra.role_id = r.id
JOIN license l ON l.id = r.license_id
WHERE a.id = ? AND a.is_deleted = false AND ra.is_deleted = false AND r.is_deleted = false AND l.is_deleted = false
`

type GetLicenseByAccountIdRow struct {
	ID       string
	RoleName string
	License  string
}

func (q *Queries) GetLicenseByAccountId(ctx context.Context, id string) (GetLicenseByAccountIdRow, error) {
	row := q.db.QueryRowContext(ctx, getLicenseByAccountId, id)
	var i GetLicenseByAccountIdRow
	err := row.Scan(&i.ID, &i.RoleName, &i.License)
	return i, err
}

const getOneAccountInfoAdmin = `-- name: GetOneAccountInfoAdmin :one
SELECT id, number,code, name, email,username, password,salt,status,created_by,create_at,update_at, images
FROM ` + "`" + `account` + "`" + `
WHERE username = ? AND is_deleted = false
`

type GetOneAccountInfoAdminRow struct {
	ID        string
	Number    int32
	Code      string
	Name      string
	Email     string
	Username  string
	Password  string
	Salt      string
	Status    bool
	CreatedBy string
	CreateAt  time.Time
	UpdateAt  time.Time
	Images    string
}

func (q *Queries) GetOneAccountInfoAdmin(ctx context.Context, username string) (GetOneAccountInfoAdminRow, error) {
	row := q.db.QueryRowContext(ctx, getOneAccountInfoAdmin, username)
	var i GetOneAccountInfoAdminRow
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Code,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Salt,
		&i.Status,
		&i.CreatedBy,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Images,
	)
	return i, err
}

const insertAccount = `-- name: InsertAccount :execresult
INSERT INTO ` + "`" + `account` + "`" + ` (
    id,
    code,
    number,
    username,
    name,
    email,
    password,
    salt,
    status,
    images,
    created_by,
    is_deleted,
    create_at,
    update_at
)
VALUES(?,?,?,?,?,?,?,?,?,?,?,false,NOW(),NOW())
`

type InsertAccountParams struct {
	ID        string
	Code      string
	Number    int32
	Username  string
	Name      string
	Email     string
	Password  string
	Salt      string
	Status    bool
	Images    string
	CreatedBy string
}

func (q *Queries) InsertAccount(ctx context.Context, arg InsertAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertAccount,
		arg.ID,
		arg.Code,
		arg.Number,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Salt,
		arg.Status,
		arg.Images,
		arg.CreatedBy,
	)
}

const updateRoleAccountByAccountId = `-- name: UpdateRoleAccountByAccountId :exec
UPDATE ` + "`" + `role_account` + "`" + `
SET role_id = ?
WHERE account_id = ? AND is_deleted = false
`

type UpdateRoleAccountByAccountIdParams struct {
	RoleID    string
	AccountID string
}

func (q *Queries) UpdateRoleAccountByAccountId(ctx context.Context, arg UpdateRoleAccountByAccountIdParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleAccountByAccountId, arg.RoleID, arg.AccountID)
	return err
}
