// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0007_license.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createLicense = `-- name: CreateLicense :execresult
INSERT INTO ` + "`" + `license` + "`" + ` (id,license, role_id, date_start, date_end, created_at, update_at, is_deleted)
    VALUES (?, ?, ?, ?, ?, NOW(), NOW(), false)
`

type CreateLicenseParams struct {
	ID        string
	License   string
	RoleID    string
	DateStart time.Time
	DateEnd   string
}

func (q *Queries) CreateLicense(ctx context.Context, arg CreateLicenseParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createLicense,
		arg.ID,
		arg.License,
		arg.RoleID,
		arg.DateStart,
		arg.DateEnd,
	)
}

const deleteLicense = `-- name: DeleteLicense :exec
UPDATE license
SET is_deleted = true,
    update_at = NOW()
WHERE id = ?
`

func (q *Queries) DeleteLicense(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteLicense, id)
	return err
}

const getAllLicenses = `-- name: GetAllLicenses :many
SELECT id, license, date_start, role_id, date_end, created_at, update_at
FROM ` + "`" + `license` + "`" + `
WHERE is_deleted = false
`

type GetAllLicensesRow struct {
	ID        string
	License   string
	DateStart time.Time
	RoleID    string
	DateEnd   string
	CreatedAt time.Time
	UpdateAt  time.Time
}

func (q *Queries) GetAllLicenses(ctx context.Context) ([]GetAllLicensesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllLicenses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllLicensesRow
	for rows.Next() {
		var i GetAllLicensesRow
		if err := rows.Scan(
			&i.ID,
			&i.License,
			&i.DateStart,
			&i.RoleID,
			&i.DateEnd,
			&i.CreatedAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLicenseById = `-- name: GetLicenseById :one
SELECT id, license, role_id, date_start, date_end, created_at, update_at
FROM ` + "`" + `license` + "`" + `
WHERE id = ? AND is_deleted = false
`

type GetLicenseByIdRow struct {
	ID        string
	License   string
	RoleID    string
	DateStart time.Time
	DateEnd   string
	CreatedAt time.Time
	UpdateAt  time.Time
}

func (q *Queries) GetLicenseById(ctx context.Context, id string) (GetLicenseByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getLicenseById, id)
	var i GetLicenseByIdRow
	err := row.Scan(
		&i.ID,
		&i.License,
		&i.RoleID,
		&i.DateStart,
		&i.DateEnd,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getLicenseByRoleId = `-- name: GetLicenseByRoleId :one
SELECT id, license, role_id, date_start, date_end, created_at, update_at
FROM ` + "`" + `license` + "`" + `
WHERE role_id = ? AND is_deleted = false
`

type GetLicenseByRoleIdRow struct {
	ID        string
	License   string
	RoleID    string
	DateStart time.Time
	DateEnd   string
	CreatedAt time.Time
	UpdateAt  time.Time
}

func (q *Queries) GetLicenseByRoleId(ctx context.Context, roleID string) (GetLicenseByRoleIdRow, error) {
	row := q.db.QueryRowContext(ctx, getLicenseByRoleId, roleID)
	var i GetLicenseByRoleIdRow
	err := row.Scan(
		&i.ID,
		&i.License,
		&i.RoleID,
		&i.DateStart,
		&i.DateEnd,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateLicense = `-- name: UpdateLicense :exec
UPDATE license
SET
    license = ?,
    date_start = ?,
    date_end = ?,
    update_at = NOW()
WHERE id = ?
`

type UpdateLicenseParams struct {
	License   string
	DateStart time.Time
	DateEnd   string
	ID        string
}

func (q *Queries) UpdateLicense(ctx context.Context, arg UpdateLicenseParams) error {
	_, err := q.db.ExecContext(ctx, updateLicense,
		arg.License,
		arg.DateStart,
		arg.DateEnd,
		arg.ID,
	)
	return err
}
