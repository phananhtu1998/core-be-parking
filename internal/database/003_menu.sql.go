// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 003_menu.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const countMenuByURL = `-- name: CountMenuByURL :one
SELECT COUNT(*) AS total_count
FROM menu
WHERE menu_url = ?
`

func (q *Queries) CountMenuByURL(ctx context.Context, menuUrl string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMenuByURL, menuUrl)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const getAllMenus = `-- name: GetAllMenus :many
SELECT 
    m1.id, m1.menu_name, m1.menu_icon, m1.menu_url, m1.menu_parent_Id,
    m1.menu_level, m1.menu_number_order, m1.menu_group_name, m1.is_deleted
FROM menu m1
WHERE m1.is_deleted = false
ORDER BY m1.menu_level ASC, m1.menu_number_order ASC
`

type GetAllMenusRow struct {
	ID              string
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
	IsDeleted       bool
}

func (q *Queries) GetAllMenus(ctx context.Context) ([]GetAllMenusRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllMenusRow
	for rows.Next() {
		var i GetAllMenusRow
		if err := rows.Scan(
			&i.ID,
			&i.MenuName,
			&i.MenuIcon,
			&i.MenuUrl,
			&i.MenuParentID,
			&i.MenuLevel,
			&i.MenuNumberOrder,
			&i.MenuGroupName,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMenuById = `-- name: GetMenuById :one
SELECT 
    m1.id, m1.menu_name, m1.menu_icon, m1.menu_url, m1.menu_parent_Id, 
    m1.menu_level, m1.menu_number_order, m1.menu_group_name, m1.is_deleted, 
    m1.create_at, m1.update_at,
    COALESCE(
        CONCAT('[', GROUP_CONCAT(
            CASE 
                WHEN m2.id IS NOT NULL THEN 
                    JSON_OBJECT(
                        'id', m2.id, 
                        'menu_name', m2.menu_name, 
                        'menu_icon', m2.menu_icon, 
                        'menu_url', m2.menu_url, 
                        'menu_level', m2.menu_level,
                        'menu_number_order', m2.menu_number_order,
                        'menu_group_name', m2.menu_group_name,
                        'is_deleted', m2.is_deleted
                    )
                ELSE NULL
            END 
            ORDER BY m2.menu_number_order ASC SEPARATOR ','
        ), ']'), '[]'
    ) AS children
FROM menu m1
LEFT JOIN menu m2 ON m1.id = m2.menu_parent_Id AND m2.is_deleted = false
WHERE m1.id = ? AND m1.is_deleted = false
GROUP BY m1.id 
ORDER BY m1.menu_number_order ASC
`

type GetMenuByIdRow struct {
	ID              string
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
	IsDeleted       bool
	CreateAt        time.Time
	UpdateAt        time.Time
	Children        interface{}
}

func (q *Queries) GetMenuById(ctx context.Context, id string) (GetMenuByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getMenuById, id)
	var i GetMenuByIdRow
	err := row.Scan(
		&i.ID,
		&i.MenuName,
		&i.MenuIcon,
		&i.MenuUrl,
		&i.MenuParentID,
		&i.MenuLevel,
		&i.MenuNumberOrder,
		&i.MenuGroupName,
		&i.IsDeleted,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Children,
	)
	return i, err
}

const getMenusByIDs = `-- name: GetMenusByIDs :many
SELECT id, menu_name, menu_icon, menu_url, menu_parent_id, menu_level, menu_number_order, menu_group_name, is_deleted
FROM menu
WHERE FIND_IN_SET(id, $1) AND is_deleted = false
`

type GetMenusByIDsRow struct {
	ID              string
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
	IsDeleted       bool
}

func (q *Queries) GetMenusByIDs(ctx context.Context) ([]GetMenusByIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMenusByIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMenusByIDsRow
	for rows.Next() {
		var i GetMenusByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.MenuName,
			&i.MenuIcon,
			&i.MenuUrl,
			&i.MenuParentID,
			&i.MenuLevel,
			&i.MenuNumberOrder,
			&i.MenuGroupName,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMenu = `-- name: InsertMenu :execresult
INSERT INTO menu (
    id, menu_name, menu_icon, menu_url, menu_parent_Id, menu_level, 
    menu_number_order, menu_group_name, is_deleted, create_at, update_at
) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?, false, NOW(), NOW())
`

type InsertMenuParams struct {
	ID              string
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
}

func (q *Queries) InsertMenu(ctx context.Context, arg InsertMenuParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertMenu,
		arg.ID,
		arg.MenuName,
		arg.MenuIcon,
		arg.MenuUrl,
		arg.MenuParentID,
		arg.MenuLevel,
		arg.MenuNumberOrder,
		arg.MenuGroupName,
	)
}

const updateSingleMenu = `-- name: UpdateSingleMenu :exec
UPDATE menu
SET 
    menu_name = ?, 
    menu_icon = ?, 
    menu_url = ?, 
    menu_parent_id = ?, 
    menu_level = ?, 
    menu_number_order = ?, 
    menu_group_name = ?
WHERE id = ?
`

type UpdateSingleMenuParams struct {
	MenuName        string
	MenuIcon        string
	MenuUrl         string
	MenuParentID    sql.NullString
	MenuLevel       int32
	MenuNumberOrder int32
	MenuGroupName   string
	ID              string
}

func (q *Queries) UpdateSingleMenu(ctx context.Context, arg UpdateSingleMenuParams) error {
	_, err := q.db.ExecContext(ctx, updateSingleMenu,
		arg.MenuName,
		arg.MenuIcon,
		arg.MenuUrl,
		arg.MenuParentID,
		arg.MenuLevel,
		arg.MenuNumberOrder,
		arg.MenuGroupName,
		arg.ID,
	)
	return err
}
