// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 0005_rolesMenu.sql

package database

import (
	"context"
	"encoding/json"
	"time"
)

const createRolesMenu = `-- name: CreateRolesMenu :exec
INSERT INTO ` + "`" + `roles_menu` + "`" + ` (id, menu_id, role_id, list_method, is_deleted, create_at, update_at)
VALUES (?, ?, ?, ?, false, NOW(), NOW())
`

type CreateRolesMenuParams struct {
	ID         string
	MenuID     string
	RoleID     string
	ListMethod json.RawMessage
}

func (q *Queries) CreateRolesMenu(ctx context.Context, arg CreateRolesMenuParams) error {
	_, err := q.db.ExecContext(ctx, createRolesMenu,
		arg.ID,
		arg.MenuID,
		arg.RoleID,
		arg.ListMethod,
	)
	return err
}

const deleteRolesMenu = `-- name: DeleteRolesMenu :exec
UPDATE ` + "`" + `roles_menu` + "`" + `
SET is_deleted = true, update_at = ?
WHERE id = ?
`

type DeleteRolesMenuParams struct {
	UpdateAt time.Time
	ID       string
}

func (q *Queries) DeleteRolesMenu(ctx context.Context, arg DeleteRolesMenuParams) error {
	_, err := q.db.ExecContext(ctx, deleteRolesMenu, arg.UpdateAt, arg.ID)
	return err
}

const getAllRolesMenu = `-- name: GetAllRolesMenu :many
SELECT id, menu_id, role_id, list_method
FROM ` + "`" + `roles_menu` + "`" + `
WHERE is_deleted = false
`

type GetAllRolesMenuRow struct {
	ID         string
	MenuID     string
	RoleID     string
	ListMethod json.RawMessage
}

func (q *Queries) GetAllRolesMenu(ctx context.Context) ([]GetAllRolesMenuRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllRolesMenu)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRolesMenuRow
	for rows.Next() {
		var i GetAllRolesMenuRow
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.RoleID,
			&i.ListMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesMenuByRoleId = `-- name: GetRolesMenuByRoleId :many
SELECT id, menu_id, role_id, list_method
FROM ` + "`" + `roles_menu` + "`" + `
WHERE role_id = ? AND is_deleted = false
`

type GetRolesMenuByRoleIdRow struct {
	ID         string
	MenuID     string
	RoleID     string
	ListMethod json.RawMessage
}

func (q *Queries) GetRolesMenuByRoleId(ctx context.Context, roleID string) ([]GetRolesMenuByRoleIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getRolesMenuByRoleId, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesMenuByRoleIdRow
	for rows.Next() {
		var i GetRolesMenuByRoleIdRow
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.RoleID,
			&i.ListMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRolesMenu = `-- name: UpdateRolesMenu :exec
UPDATE ` + "`" + `roles_menu` + "`" + `
SET menu_id = ?, role_id = ?, list_method = ?
WHERE id = ?
`

type UpdateRolesMenuParams struct {
	MenuID     string
	RoleID     string
	ListMethod json.RawMessage
	ID         string
}

func (q *Queries) UpdateRolesMenu(ctx context.Context, arg UpdateRolesMenuParams) error {
	_, err := q.db.ExecContext(ctx, updateRolesMenu,
		arg.MenuID,
		arg.RoleID,
		arg.ListMethod,
		arg.ID,
	)
	return err
}
